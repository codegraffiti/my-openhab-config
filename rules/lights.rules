import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*

rule "send command from remote to living room light 1"
when
        Item remote_light_living_room changed
then
        sendCommand(light_living_room, remote_light_living_room.state.toString)
end

rule "send command from remote to living room light 2"
when
        Item remote_light_living_room_2 changed
then
        sendCommand(light_living_room_2, remote_light_living_room_2.state.toString)
end

rule "send command from remote to living room light 3"
when
        Item remote_light_living_room_3 changed
then
        sendCommand(light_living_room_3, remote_light_living_room_3.state.toString)
end

rule "send command from remote to basement light"
when
        Item remote_light_basement_power changed
then
        sendCommand(light_basement_power, remote_light_basement_power.state.toString)
end

rule "send command from remote to basement window light"
when
        Item remote_light_basement_window changed
then
        sendCommand(light_basement_window, remote_light_basement_window.state.toString)
end

rule "scene for lights in living room"
when
	Item scene_light_livingroom received command
then
	logInfo('org.openhab', 'scene_light_livingroom received state:' + scene_light_livingroom.state)
	switch (receivedCommand) {
		case 0: {
			sendCommand(light_living_room, OFF)
			sendCommand(light_living_room_3, OFF)
			sendCommand(light_living_room_2, OFF)
		}
		case 1: {
			sendCommand(light_living_room, ON)
			sendCommand(light_living_room_3, ON)
			sendCommand(light_living_room_2, ON)	
		}
		case 2: {
			sendCommand(light_living_room, OFF)
			sendCommand(light_living_room_3, OFF)
			sendCommand(light_living_room_2, ON)	
		}
	}	
	logInfo('org.openhab', 'scene_light_livingroom update to: ' + scene_light_livingroom.state)
end

rule "Switch on living room lights"
	when
		Item right_double_switch received command ON	
	then
		sendCommand(scene_light_livingroom, 1)
end

rule "Switch off living room lights"
	when
		Item right_double_switch received command OFF	
	then
		sendCommand(scene_light_livingroom, 0)
end

rule "motion detected in the living room" 
	when
		Item sensor_1_motion changed
	then
	logInfo('org.openhab', 'Motion sensor in the living room changed to: ' + sensor_1_motion.state)
	//pushover('Motion received update: ' + sensor_1_motion.state + ' - Mode:' + mode.state + ' - TV:' + tv_power.state)
	switch (sensor_1_motion.state as OnOffType) {
		case ON: {
			if (mode.state == 2) {
				pushover("Bevegelse i stua n√•r ingen er hjemme...")
			} else if (mode.state == 0) {
				var double lux = new Double(sensor_1_luminance.state.toString())
				pushover('Lux is: ' + lux)
				if (lux <= 100) {
					if (tv_power.state == OFF) {
						sendCommand(scene_light_livingroom, 1)
					} else if (tv_power.state == ON && scene_light_livingroom.state == 0) {
						sendCommand(scene_light_livingroom, 2)
					}			
				}
			}	
		}
		case OFF: {
			if (tv_power.state == OFF && scene_light_livingroom.state > 0) {
				sendCommand(scene_light_livingroom, 2)
			}	
		}
	}
	logInfo('org.openhab', 'Motion sensor in the livingroom updated to: ' + sensor_1_motion.state)
end

rule "Lighting in living room has changed" 
	when
		Item sensor_1_luminance changed
	then
		if (mode.state == 0) {
			var double lux = new Double(sensor_1_luminance.state.toString())
			logInfo('org.openhab.rules', 'Luminance change to: ' + lux + ' and living room light state: ' + scene_light_livingroom.state)
			if (lux > 100 && scene_light_livingroom.state != 0) {
				sendCommand(scene_light_livingroom, 0)
			} else if (lux <= 100 && sensor_1_motion.state == ON && scene_light_livingroom.state == 0) {
				sendCommand(scene_light_livingroom, 1)
			} 
		}
end