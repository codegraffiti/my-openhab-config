import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*
import java.util.Map
import org.joda.time.DateTime

var Map stored_states = null
var Timer night_timer = null

rule "A change of mode"
	when
		Item mode received command
	then
	switch (receivedCommand) {
		case 0: { // HOME
			restoreStates(stored_states)
			if (new Double(OutdoorTemperature.state.toString()) < 10 && ac_power.state == OFF) {
				sendCommand(ac_power, ON)
			}
			
			if (previous_mode.state == 2) {
				pushover("Velkommen hjem! Det er akkurat nå " + OutdoorTemperature.state.format("%.1f") + " °C ute, og " + LivingRoomTemperature.state.format("%.1f") + " °C i stua")
		
				sendCommand(guest_home, ON)
				if (dryer.state == ON) {
					postUpdate(push_message_text, "Tørketrommelen ble startet igjen nå når du kom hjem.")
				}
			}
		}
		
		case 1: { // NIGHT
			stored_states = storeStates(night_group)
			sendCommand(scene_light_livingroom, 0)
			sendCommand(light_basement_power, OFF)
			sendCommand(kontor_panelovn, OFF)
			sendCommand(gang_panelovn, OFF)
		
			if (dryer.state == ON && new Double(power_dryer.state.toString()) > 10) {
				postUpdate(push_message_text, "Husk tørketrommelen før du legger deg")
			}
			if (tv_power.state == ON) {
				sendCommand(tv_power, OFF)
			}
			if (ac_power.state == ON && ac_night_temp.state != Uninitialized) {
				sendCommand(ac_set_temp, ac_night_temp.state.toString)
				if (ac_mode.state != 0)
					sendCommand(ac_mode, 0)
			}	
		}
		
		case 2: { //AWAY
			if (OutdoorTemperature.state instanceof DecimalType) {
				pushover("Du dro kl: " + now.getHourOfDay + ":" + now.getMinuteOfHour + ", Akkurat nå er det " + OutdoorTemperature.state.format("%.1f") + " °C ute")
			}
			stored_states = storeStates(away_group)
			if (dryer.state == ON && new Double(power_dryer.state.toString()) > 10) {
				postUpdate(push_message_text, "Tørketrommelen ble skrudd av nå når du dro hjemmefra.")
				sendCommand(dryer, OFF)
			}
			if (tv_power.state == ON) {
				postUpdate(push_message_text, "TV-en ble skrudd av når du dro hjemmefra")
				sendCommand(tv_power, OFF)
			}
			sendCommand(guest_home, OFF)
			sendCommand(light_basement_power, OFF)
			sendCommand(kontor_panelovn, OFF)
			sendCommand(gang_panelovn, OFF)
			sendCommand(scene_light_livingroom, 0)
			if (ac_power.state == ON && ac_night_temp.state != Uninitialized) {
				sendCommand(ac_set_temp, ac_night_temp.state.toString)
				if (ac_mode.state != 0)
					sendCommand(ac_mode, 0)
			}		
		}
	}
	postUpdate(previous_mode, mode.state.toString)
end

/*
 * At 23 in the evening we'll go into night mode, but only if someone is at home.
 * Away mode overrules night mode
 */
rule "Switch to night mode in the evening"
	when
		Time cron "0 0 23 ? * *" 
	then
		if (tv_power.state == ON) {
			// If TV is still on or there's someone in the living room, we'll wait a bit before going into night mode
			night_timer = createTimer(now.plusSeconds(360)) [|
				if (tv_power.state == ON || sensor_1_motion.state == ON) {
					night_timer.reschedule(now.plusSeconds(360))
				} else {
					if (mode.state != 2) {
						sendCommand(mode, 1)
					}
				
					if(night_timer!=null) {
						if(night_timer.running) {
							night_timer.cancel()
						}
						night_timer = null
					}
				}
				]
		} else if (mode.state != 2) {
			sendCommand(mode, 1)
		}
end

/*
 * We'll return to day mode again, but only if we are at home.
 */
rule "Return to day mode during the week"
	when
		Time cron "0 30 5 ? * MON-FRI"
	then
		if (mode.state == 1) {
			sendCommand(mode, 0)
		}
end

rule "Return to day mode during weekend"
	when
		Time cron "0 0 7 ? * SAT-SUN"
	then
		if (mode.state == 1) {
			sendCommand(mode, 0)
		}
end