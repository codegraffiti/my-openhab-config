import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*
import java.util.Map
import org.joda.time.DateTime

var Timer timerRouterLAN = null
var Timer timerDryer = null

rule "Startup"
	when
		System started
	then
		if (ac_night_temp.state == Uninitialized) {
			sendCommand(ac_night_temp, 19)
		}
end

rule "Leaving home, we think"
when
	Item router_wlan changed from ON to OFF
then
	logInfo("org.openhab.rules","Router disconnected, started timer.")
	if( timerRouterLAN == null ) {
		timerRouterLAN = createTimer(now.plusSeconds(30)) [|
				if (router_wlan.state == ON) {
					logInfo("org.openhab.rules", "Router is back up and running, so no one left!")
					if(timerRouterLAN!=null) {
						if(timerRouterLAN.running) {
							timerRouterLAN.cancel()
						}
						timerRouterLAN= null
					}
				} else if (time_capsule_lan.state == OFF || boss_lan.state == OFF) {
					logInfo("org.openhab.rules", "Seems like we lost network connection, let's wait a bit more")
					timerRouterLAN.reschedule(now.plusSeconds(240))
				} else {
					logInfo("org.openhab.rules", "Timer has timed out. Executing proximity off")
					sendCommand(away_mode, ON)
					if(timerRouterLAN!=null) {
						if(timerRouterLAN.running) {
							timerRouterLAN.cancel()
						}
						timerRouterLAN= null
					}
				}]
	} else {
		timerRouterLAN.reschedule(now.plusSeconds(30))
	}
end

rule "Alarm is being disarmed"
	when
		Item router_wlan changed from OFF to ON
	then
		if(timerRouterLAN != null) {
			timerRouterLAN.cancel()
			timerRouterLAN = null
		}
		sendCommand(away_mode, OFF)
end

rule "When text is changes, send a push message"
	when
		Item push_message_text received update
	then
		logInfo('org.openhab', 'message text is: ' + push_message_text.state)
		try {
			callScript('pushMessages')
		} catch (org.openhab.core.scriptengine.ScriptExecutionException e) {
			pushover('Could not send push message: ' + push_message_text.state.toString)
		}
end

// Creates an item that stores the last update time of this item
rule "Records last outdoor update time"
when
  Item OutdoorTemperature received update
then
  postUpdate(OutdoorTemperature_LastUpdate, new DateTimeType())
end

rule "Records last office temperature update time"
when
  Item OfficeTemperature received update
then
  postUpdate(OfficeTemperature_LastUpdate, new DateTimeType())
end

rule "Records last basement temperature update time"
when
  Item BasementTemperature received update
then
  postUpdate(BasementTemperature_LastUpdate, new DateTimeType())
end

rule "Records last living room temperature update time"
when
  Item LivingRoomTemperature received update
then
  postUpdate(LivingRoomTemperature_LastUpdate, new DateTimeType())
end

/** 
 * This rule will be used to test Scale transformation service
 */
rule "Compute humidex"
when Item OutdoorTemperature changed or
	 Item OutdoorHumidity changed 
then
	var Number T = OutdoorTemperature.state as DecimalType
	var Number H = OutdoorHumidity.state as DecimalType	
	var Number x = 7.5 * T/(237.7 + T)
	var Number e = 6.112 * Math::pow(10, x.doubleValue) * H/100
	var Number humidex = T + (new Double(5) / new Double(9)) * (e - 10)
	Weather_Humidex.postUpdate(humidex)
end

rule "Update max and min temperatures"
when
	Item OutdoorTemperature changed or
	Time cron "0 0 0 * * ?" or
	System started
then	
	postUpdate(Weather_Temp_Max, OutdoorTemperature.maximumSince(now.toLocalDate.toDateTimeAtStartOfDay).state)
	postUpdate(Weather_Temp_Min, OutdoorTemperature.minimumSince(now.toLocalDate.toDateTimeAtStartOfDay).state)
	//logInfo("Weather","Temperature evolved of " + OutdoorTemperature.deltaSince(now.minusMinutes(2)).toString + " degrees.")
end

rule "Record last update received from Samsung Air Conditioner"
when
 	Item ac_current_temp received update
then
	postUpdate(ac_lastUpdate, new DateTimeType())
end

rule "Set Samsung TV to same state as LAN-checking, and set Air Conditioner to QUIET-mode if TV is being switched on"
when
	Item TV_living_room changed
then
	tv_power.setState(TV_living_room.state)
	if (tv_power.state == ON) {
		ac_mode_previous.sendCommand(ac_mode.state.toString)
		ac_mode.sendCommand(1)
	} else if (tv_power.state == OFF && ac_mode_previous.state.toString != "99") {
		ac_mode.sendCommand(ac_mode_previous.state.toString)
		ac_mode_previous.sendCommand(99)
	}
end

rule "Dryer has been started, notify me when it is done"
when
	Item power_dryer changed
then
	if (dryer.state == ON) {
		var double w = new Double(power_dryer.state.toString())
		var double maxLastHour = new Double(power_dryer.maximumSince(now.minusHours(1)).state.toString())
		var double maxLastTwoMinutes = new Double(power_dryer.maximumSince(now.minusMinutes(2)).state.toString())
		if (w < 2 && maxLastHour > 100 && (maxLastTwoMinutes <= (w*2) || w == 0)) {
			postUpdate(push_message_text, "Tørketrommelen er ferdig!")
			timerDryer = createTimer(now.plusSeconds(120)) [|
				var double maxLastTwoMinutes_timer = new Double(power_dryer.maximumSince(now.minusMinutes(2)).state.toString())
				if (maxLastTwoMinutes_timer == 0)
					sendCommand(dryer, OFF)
			]	
		}
	} else if(timerDryer != null) {
		if(timerDryer.running) {
			timerDryer.cancel()
		}
		timerDryer= null	
	}
end

rule "Freezer is suddenly using less power"
when
	Item power_freezer changed
then
	var double w = new Double(power_freezer.state.toString())
	var double maxLastHour = new Double(power_freezer.maximumSince(now.minusHours(1)).state.toString())
	if (w < 5 || (w < 70 && maxLastHour < 70 )) {
		pushover("Fryseren drar plutselig mindre strøm enn vanlig, nå kun: " + w + " watt og maks siste time er: " + maxLastHour)
	}
end

rule "Last update for motion detector"
when
	Item sensor_1_lu received update
then
  var v = new DateTime(new Long(sensor_1_lu.state.toString) * 1000L)
  postUpdate(sensor_1_update, new DateTimeType(v.toGregorianCalendar))
end

rule "Send a status message at 22 if anything is NOT ok"
	when
		Time cron "0 0 22 ? * *"
	then
		if (garage_door_1.state == ON || garage_door_2.state == ON) {
			postUpdate(push_message_text, "Leaf: " + garage_door_1.state.toString() + ", Mondeo:" + garage_door_2.state.toString())
		}
		if (boss_lan.state == OFF && !boss_lan.changedSince(now.minusHours(12))) {
			pushover('Boss is not responding, and has been off for 12 hours')
		}
		if (nas_lan.state == OFF && !nas_lan.changedSince(now.minusHours(12))) {
			pushover('NAS is not responding, and has been off for 12 hours')
		} 	
		if (away_mode.state == ON || night_mode.state == ON && tv_power.state == ON) {
			pushover('TV står på, men du har enten lagt deg eller er borte..')
		} 	
end

