import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*
import java.util.Map

var Timer timerRouterLAN = null
var Map states = null

rule "Switch on living room lights"
	when
		Item right_double_switch received command ON	
	then
		sendCommand(Living_Room_Lights, ON)
		sendCommand(gLight, ON)
end

rule "Switch off living room lights"
	when
		Item right_double_switch received command OFF	
	then
		sendCommand(Living_Room_Lights, OFF)
		sendCommand(gLight, OFF)
end

rule "Leaving home, we think"
when
	Item router_wlan changed from ON to OFF
then
	logInfo("org.openhab.rules","Router disconnected, started timer.")
	if( timerRouterLAN == null ) {
		timerRouterLAN = createTimer(now.plusSeconds(30)) [|
				if (router_wlan.state == ON) {
					logInfo("org.openhab.rules", "Router is back up and running, so no one left!")
					if(timerRouterLAN!=null) {
						if(timerRouterLAN.running) {
							timerRouterLAN.cancel()
						}
						timerRouterLAN= null
					}
				} else if (time_capsule_lan.state == OFF || boss_lan.state == OFF) {
					logInfo("org.openhab.rules", "Seems like we lost network connection, let's wait a bit more")
					timerRouterLAN.reschedule(now.plusSeconds(240))
				} else {
					logInfo("org.openhab.rules", "Timer has timed out. Executing proximity off")
					if (OutdoorTemperature.state instanceof DecimalType) {
						pushover("Du dro kl: " + now.getHourOfDay + ":" + now.getMinuteOfHour + ", Akkurat nå er det " + OutdoorTemperature.state.format("%.1f") + " °C ute")
					}
					states = storeStates(dryer, kontor_panelovn, Living_Room_Lights, ac_mode, ac_set_temp)
					sendCommand(guest_home, OFF)
					sendCommand(Home, OFF)
					sendCommand(Living_Room_Lights, OFF)
					sendCommand(ac_set_temp, ac_night_temp.state.toString)
					sendCommand(ac_mode, 0)
					if (dryer.state == ON && new Double(power_dryer.state.toString()) > 10) {
						pushover("Tørketrommelen ble skrudd av nå når du dro hjemmefra.")
					}
					sendCommand(HomeAppliances, OFF)
					if(timerRouterLAN!=null) {
						if(timerRouterLAN.running) {
							timerRouterLAN.cancel()
						}
						timerRouterLAN= null
					}
				}]
	} else {
		timerRouterLAN.reschedule(now.plusSeconds(30))
	}
end

rule "Alarm is being disarmed"
	when
		Item router_wlan changed from OFF to ON
	then
		if(timerRouterLAN != null) {
			timerRouterLAN.cancel()
			timerRouterLAN = null
		}
		if(guest_home.state == OFF && (OutdoorTemperature.state instanceof DecimalType) && (LivingRoomTemperature.state instanceof DecimalType) ){
			pushover("Velkommen hjem! Det er akkurat nå " + OutdoorTemperature.state.format("%.1f") + " °C ute, og " + LivingRoomTemperature.state.format("%.1f") + " °C i stua")
		}
		restoreStates(states)
		sendCommand(guest_home, ON)
		if (dryer.state == ON) {
			pushover("Tørketrommelen ble startet igjen nå når du kom hjem.")
		}
end

rule "When text is changes, send a push message"
	when
		Item push_message_text changed
	then
		logInfo('org.openhab', 'message text is: ' + push_message_text.state)
		try {
			callScript('pushMessages')
		} catch (org.openhab.core.scriptengine.ScriptExecutionException e) {}
end

// Creates an item that stores the last update time of this item
rule "Records last outdoor update time"
when
  Item OutdoorTemperature received update
then
  postUpdate(OutdoorTemperature_LastUpdate, new DateTimeType())
end

rule "Records last office temperature update time"
when
  Item OfficeTemperature received update
then
  postUpdate(OfficeTemperature_LastUpdate, new DateTimeType())
end

rule "Records last basement temperature update time"
when
  Item BasementTemperature received update
then
  postUpdate(BasementTemperature_LastUpdate, new DateTimeType())
end

rule "Records last living room temperature update time"
when
  Item LivingRoomTemperature received update
then
  postUpdate(LivingRoomTemperature_LastUpdate, new DateTimeType())
end

/** 
 * This rule will be used to test Scale transformation service
 */
rule "Compute humidex"
when Item OutdoorTemperature changed or
	 Item OutdoorHumidity changed 
then
	var Number T = OutdoorTemperature.state as DecimalType
	var Number H = OutdoorHumidity.state as DecimalType	
	var Number x = 7.5 * T/(237.7 + T)
	var Number e = 6.112 * Math::pow(10, x.doubleValue) * H/100
	var Number humidex = T + (new Double(5) / new Double(9)) * (e - 10)
	Weather_Humidex.postUpdate(humidex)
end

rule "Update max and min temperatures"
when
	Item OutdoorTemperature changed or
	Time cron "0 0 0 * * ?" or
	System started
then	
	postUpdate(Weather_Temp_Max, OutdoorTemperature.maximumSince(now.toDateMidnight).state)
	postUpdate(Weather_Temp_Min, OutdoorTemperature.minimumSince(now.toDateMidnight).state)
	//logInfo("Weather","Temperature evolved of " + OutdoorTemperature.deltaSince(now.minusMinutes(2)).toString + " degrees.")
end

rule "Record last update received from Samsung Air Conditioner"
when
 	Item ac_current_temp received update
then
	postUpdate(ac_lastUpdate, new DateTimeType())
end

rule "Set Samsung TV to same state as LAN-checking, and set Air Conditioner to QUIET-mode if TV is being switched on"
when
	Item TV_living_room changed
then
	tv_power.setState(TV_living_room.state)
	if (tv_power.state == ON) {
		ac_mode_previous.sendCommand(ac_mode.state.toString)
		ac_mode.sendCommand(1)
	} else if (tv_power.state == OFF && ac_mode_previous.state.toString != "99") {
		ac_mode.sendCommand(ac_mode_previous.state.toString)
		ac_mode_previous.sendCommand(99)
	}
end

rule "Dryer has been started, notify me when it is done"
when
	Item power_dryer changed
then
	var double w = new Double(power_dryer.state.toString())
	var double maxLastHour = new Double(power_dryer.maximumSince(now.minusHours(1)).state.toString())
	var double maxLastTwoMinutes = new Double(power_dryer.maximumSince(now.minusMinutes(2)).state.toString())
	if (w < 2 && maxLastHour > 100 && maxLastTwoMinutes <= w && dryer.state == ON) {
		/*sendCommand(dryer, OFF)*/
		pushover("Tørketrommelen er ferdig!")	
	}
end

rule "Freezer is suddenly using less power"
when
	Item power_freezer changed
then
	var double w = new Double(power_freezer.state.toString())
	var double maxLastHour = new Double(power_freezer.maximumSince(now.minusHours(1)).state.toString())
	if (w < 5 || (w < 70 && maxLastHour < 70 )) {
		pushover("Fryseren drar plutselig mindre strøm enn vanlig, nå kun: " + w + " watt og maks siste time er: " + maxLastHour)
	}
end
