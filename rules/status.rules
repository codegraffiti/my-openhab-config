import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*

rule "Check garage doors when clicking button"
	when
		Item right_double_switch received command ON	
	then
		postUpdate(push_message_text, "Garasjeport - LEAF: " + garage_door_1.state.toString + ", Mondeo: " + garage_door_2.state.toString)
end

rule "Leaving house"
	when
		Item right_double_switch received command OFF	
	then
		sendCommand(Heating, OFF)
		sendCommand(kontor_panelovn, OFF)
		sendCommand(guest_home, OFF)
		sendCommand(Home, OFF)
		sendCommand(gLight, OFF)
		if (OutdoorTemperature.state instanceof DecimalType) {
			pushover("God tur ut i " + OutdoorTemperature.state.format("%.1f") + " °C")
		}
end

rule "Alarm is being armed"
	when
		Item router_wlan changed from ON to OFF
	then
		if (OutdoorTemperature.state instanceof DecimalType) {
			pushover("Du dro kl: " + now.getHourOfDay + ":" + now.getMinuteOfHour + ", Akkurat nå er det " + OutdoorTemperature.state.format("%.1f") + " °C ute")
		}
		sendCommand(guest_home, OFF)
		sendCommand(Home, OFF)
		sendCommand(gLight, OFF)
end

rule "Alarm is being disarmed"
	when
		Item router_wlan changed from OFF to ON
	then
		if( (OutdoorTemperature.state instanceof DecimalType) && (OutdoorTemperature.state instanceof DecimalType) ){
			pushover("Velkommen hjem! Det er akkurat nå " + OutdoorTemperature.state.format("%.1f") + " °C ute, og " + LivingRoomTemperature.state.format("%.1f") + " °C i stua")
		}
		sendCommand(guest_home, ON)
end

rule "When text is changes, send a push message"
	when
		Item push_message_text changed
	then
		logInfo('org.openhab', 'message text is: ' + push_message_text.state)
		try {
				callScript('pushMessages')
		} catch (org.openhab.core.scriptengine.ScriptExecutionException e) {}
end

// Creates an item that stores the last update time of this item
rule "Records last weather update time"
when
  Item OutdoorTemperature received update
then
  postUpdate(Weather_LastUpdate, new DateTimeType())
end

/** 
 * This rule will be used to test Scale transformation service
 */
rule "Compute humidex"
when Item OutdoorTemperature changed or
	 Item OutdoorHumidity changed 
then
	var Number T = OutdoorTemperature.state as DecimalType
	var Number H = OutdoorHumidity.state as DecimalType	
	var Number x = 7.5 * T/(237.7 + T)
	var Number e = 6.112 * Math::pow(10, x.doubleValue) * H/100
	var Number humidex = T + (new Double(5) / new Double(9)) * (e - 10)
	Weather_Humidex.postUpdate(humidex)
end

rule "Update max and min temperatures"
when
	Item OutdoorTemperature changed or
	Time cron "0 0 0 * * ?" or
	System started
then	
	postUpdate(Weather_Temp_Max, OutdoorTemperature.maximumSince(now.toDateMidnight).state)
	postUpdate(Weather_Temp_Min, OutdoorTemperature.minimumSince(now.toDateMidnight).state)
	//logInfo("Weather","Temperature evolved of " + OutdoorTemperature.deltaSince(now.minusMinutes(2)).toString + " degrees.")
end